import React, { Component } from 'react';
import Icon from 'react-native-vector-icons/Ionicons'
import {
    View, Text, Platform,
    Image,
    StyleSheet,
    ImageBackground,

} from "react-native";
import { connect } from "react-redux";
import HeadingText from "../../components/UI/HeadingText/HeadingText";

import splash from "../../assets/splash.jpg";
import { authAutoSignIn } from "../../store/actions/index";
import NotificationsIOS, { NotificationsAndroid, PendingNotifications } from 'react-native-notifications';

class SplashScreen extends Component {


    constructor(props) {
        super(props);
        if (Platform.OS === 'ios') {
            this._boundOnNotificationReceivedForeground = this.onNotificationReceivedForeground.bind(this);
            this._boundOnNotificationOpened = this.onNotificationOpened.bind(this);

            NotificationsIOS.addEventListener('notificationReceivedForeground', this._boundOnNotificationReceivedForeground);
            NotificationsIOS.addEventListener('notificationOpened', this._boundOnNotificationOpened);
            NotificationsIOS.addEventListener('remoteNotificationsRegistered', this.onPushRegistered.bind(this));
            NotificationsIOS.addEventListener('remoteNotificationsRegistrationFailed', this.onPushRegistrationFailed.bind(this));
            NotificationsIOS.requestPermissions();
        }
        else {
            // NotificationsAndroid.checkPermissions().then((currentPermissions) => {
            //     console.log('Badges enabled: ' + !!currentPermissions.badge);
            //     console.log('Sounds enabled: ' + !!currentPermissions.sound);
            //     console.log('Alerts enabled: ' + !!currentPermissions.alert);
            // });
            NotificationsAndroid.setNotificationReceivedListener((notification) => {
                console.log("Notification received on device in background or foreground", notification.getData());
            });
            NotificationsAndroid.setNotificationReceivedInForegroundListener((notification) => {
                console.log("Notification received on device in foreground", notification.getData());
            });
            NotificationsAndroid.setNotificationOpenedListener((notification) => {
                console.log("Notification opened by device user", notification.getData());
            });
            NotificationsAndroid.setRegistrationTokenUpdateListener((deviceToken) => {
                // TODO: Send the token to my server so it could send back push notifications...
                console.log('Push-notifications registered!', deviceToken)
            });

            PendingNotifications.getInitialNotification()
                .then((notification) => {
                    console.log("Initial notification was:", (notification ? notification.getData() : 'N/A'));
                    // open component from here
                })
                .catch((err) => console.error("getInitialNotifiation() failed", err));
        }


    }

    sendLocalNotification=() =>{
        NotificationsAndroid.localNotification({
          title: "Local notification",
          body: "This notification was generated by the app!",
          extra: "data"
        });
      }

    onNotificationReceivedForeground(notification, completion) {
        completion({ alert: true, sound: false, badge: false });
        console.log("Notification Received - Foreground", notification);
    }

    onNotificationOpened(notification, completion, action) {
        console.log("Notification opened by device user", notification);
        console.log(`Notification opened with an action identifier: ${action.identifier} and response text: ${action.text}`, notification);
        completion();
    }

    onPushRegistered(deviceToken) {
        // TODO: Send the token to my server so it could send back push notifications...
        console.log("Device Token Received", deviceToken);
    }

    componentWillUnmount() {
        if (Platform.OS === 'ios') {
        NotificationsIOS.removeEventListener('remoteNotificationsRegistered', this.onPushRegistered.bind(this));
        NotificationsIOS.removeEventListener('remoteNotificationsRegistrationFailed', this.onPushRegistrationFailed.bind(this));
        NotificationsIOS.removeEventListener('notificationReceivedForeground', this._boundOnNotificationReceivedForeground);
        NotificationsIOS.removeEventListener('notificationOpened', this._boundOnNotificationOpened);
        }
    }



    // NotificationsIOS.checkPermissions().then((currentPermissions) => {
    //     console.log('Badges enabled: ' + !!currentPermissions.badge);
    //     console.log('Sounds enabled: ' + !!currentPermissions.sound);
    //     console.log('Alerts enabled: ' + !!currentPermissions.alert);
    // });

    onPushRegistrationFailed(error) {
        // For example:
        //
        // error={
        //   domain: 'NSCocoaErroDomain',
        //   code: 3010,
        //   localizedDescription: 'remote notifications are not supported in the simulator'
        // }
        console.error(error);
    }

    componentDidMount() {
      this.props.onAutoSignIn();
     //   this.sendLocalNotification()

     

    }


    

    render() {

        return (
            <ImageBackground source={splash} style={styles.backgroundImage}>
                <View style={styles.container}>
                    <HeadingText style={[styles.textStyle, { marginTop: 0 }]} >Online Grievance</HeadingText>

                    <HeadingText style={[styles.textStyle, { marginTop: 0 }]}>Redressal and</HeadingText>
                    <HeadingText style={[styles.textStyle, { marginTop: 0 }]}>Feedback System</HeadingText>
                </View>


            </ImageBackground>
        )
    }
}


const styles = StyleSheet.create({

    container: {
        justifyContent: "center",
        alignItems: "center",
        marginBottom: 200,

    },
    textStyle: {

        fontSize: 28,
        fontFamily: "Poppins-Bold",
        fontWeight: "bold"
    },
    backgroundImage: {
        width: "100%",
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
    },


});


const mapStateToProps = state => {
    return {
        isLoadind: state.ui.isLoading
    }
}

const mapDispatchToProps = dispatch => {
    return {
        // onOtp: (authData) => dispatch(tyrOtp(authData)),

        onAutoSignIn: () => dispatch(authAutoSignIn())
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(SplashScreen);
